}
}
opt_con_real <- d_real[1,colnames(d_real)]
opt_con_real$gammas = 0
opt_con_real$etas = 0
for (i in 1:length(gammas)){
for (j in 1:length(etas)){
J = d_real$I.M.W. - gammas[i] * d_real$I.U.W. + etas[j] * d_real$consistency_score
ind = which.min(J)
opt_con_real <- rbind(opt_con_real, cbind(d_real[ind,], gammas = gammas[i], etas = etas[j]))
}
}
opt_con_real = opt_con_real[2:nrow(opt_con_real),] %>% mutate(J = I.U.W. - gammas * I.M.W. + etas * consistency_score)
opt_con_summary <- opt_con_real %>% group_by_at(vars(starts_with('D', ignore.case = FALSE))) %>% summarise(consistency_score = mean(consistency_score),
gammas = min(gammas),
etas = min(etas))
opt_con_summary <- opt_con %>% group_by_at(vars(starts_with('D', ignore.case = FALSE))) %>% summarise(consistency_score = mean(consistency_score),
gammas = min(gammas),
etas = min(etas))
opt_con_real_summary <- opt_con_real %>% group_by_at(vars(starts_with('D', ignore.case = FALSE))) %>% summarise(consistency_score = mean(consistency_score),
gammas = min(gammas),
etas = min(etas))
View(opt_con_real_summary)
ggplot(opt_con_summary %>%
pivot_longer(1:9, names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distal_level', 'orientation'), sep = '_') %>%
mutate(label = paste0('beta = ', sprintf('%.3f', as.numeric(gammas)), '; gamma = ', sprintf('%.3f', as.numeric(etas)))),
aes(x = orientation, y = distal_level, fill = as.factor(word))) +
facet_wrap(~label) +
geom_tile() +
scale_fill_manual(values = getPalette(colourCount)) +
xlab('Orientation') +
ylab('Distal Level') +
theme_bw(17) +
guides(fill = guide_legend(title = 'Word'))
ggplot(opt_con_summary %>%
pivot_longer(1:9, names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distal_level', 'orientation'), sep = '_') %>%
mutate(label = paste0('beta = ', sprintf('%.3f', as.numeric(gammas)), '; gamma = ', sprintf('%.3f', as.numeric(etas)))),
aes(x = orientation, y = distal_level, fill = as.factor(word))) +
facet_wrap(~label) +
geom_tile() +
scale_fill_manual(values = getPalette(colourCount)) +
xlab('Orientation') +
ylab('Distal Level') +
theme_bw(17) +
guides(fill = guide_legend(title = 'Word'))
ggsave(paste0('figures/orig_figures/Figure 10.png'), width = 15, height = 12, units = 'in')
ggplot(opt_con_summary %>%
pivot_longer(1:9, names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distal_level', 'orientation'), sep = '_') %>%
mutate(label = paste0('beta = ', sprintf('%.3f', as.numeric(gammas)), '; gamma = ', sprintf('%.3f', as.numeric(etas)))),
aes(x = orientation, y = distal_level, fill = as.factor(word))) +
facet_wrap(~label) +
geom_tile() +
scale_fill_manual(values = getPalette(colourCount)) +
xlab('Orientation') +
ylab('Distance Level') +
theme_bw(17) +
guides(fill = guide_legend(title = 'Word'))
ggsave(paste0('figures/orig_figures/Figure 10.png'), width = 15, height = 12, units = 'in')
setwd("~/Documents/BCS/TedLab/here_there_way_over_there/repo_published/spatial_demonstratives")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(ggrepel)
library(RColorBrewer)
library(ggnewscale)
library(latex2exp)
library(gridExtra)
library(ggrepel)
# decay parameter
mu <- 0.2
# P/G/S coordinates
pgs <- '0.0_-0.789_1.316'
# number of distal levels
num_dists <- 'num_dists_3'
# output file
d = read.csv(paste0('sheets/merge_d1d2.csv_mu_',toString(mu),'_pgs', pgs, num_dists, '.csv'))  %>%
mutate(Language = gsub('\\[(.*?)\\]', '', Language)) %>% pivot_longer(2:10, names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distal_level', 'orientation'), sep = '_') %>% group_by(Language) %>%
mutate(word = as.character(word) %>% factor(levels = unique(.)) %>% as.numeric()) %>% ungroup() %>%
unite('mode', c('distal_level', 'orientation'), sep = '_') %>%
pivot_wider(names_from = mode, values_from = word)
# non-deterministic optimal frontier
curve_non_deter = read.csv(paste0('sheets/merge_d1d2.csv_mu_',toString(mu),'_pgs', pgs, num_dists, '_ib_curve.csv'))
# get columns indicating the (distal_level, orientation) combinations
co <- which(!is.na(str_extract(colnames(d), 'D\\d_')))
# calculate number of words
d[, "nwords"] <- apply(d[,co], 1, max)
# color patelle for plotting
colourCount = 9
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
pos <- position_jitter(height = 0.01, width = 0.01, seed = 2)
ggplot(d %>% filter(LangCategory == 'real')) +
geom_point(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), alpha = 0.1, size = 3, color = 'gray') +
geom_jitter(aes(x=`I.M.W.`, y=`I.U.W.`, color = Area), size = 3, position = pos) +
geom_line(data = curve_non_deter, aes(x = complexity, y = informativity ), color = 'black', size = 1) +
geom_smooth(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), method = 'lm', color ='blue',
linetype='dashed') +
theme_bw(25) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
xlab('Complexity') +
ylab('Informativity') +
xlim(0,max(d$I.M.W.) + 0.35) +
ylim(0,max(d$I.U.W.) + 0.10) +
scale_color_brewer(palette = 'Set2') +
geom_text_repel(data = d %>% filter(Language %in% c('Abau (Sepik, Upper) ',
'  Doromu-Koki (Trans-New Guinea, Manubaran) ',
'Balese (Central Sudanic)')),
aes(x = I.M.W., y = I.U.W., label = Language),
point.padding = 0.1,
nudge_x = -0.05,
nudge_y = -0.05,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.015, "npc")),
#position = pos
)+
geom_text_repel(data = d %>% filter(Language %in% c('  Dyirbal (Pama-Nyungan)',
'  Kodiak Alutiiq (Eskimo-Aleut, Aleut) ',
'Hmong Njua (Hmong-Mien, Chuanqiandian)',
'English (Indo-European, Germanic)'
)),
aes(x = I.M.W., y = I.U.W., label = Language),
point.padding = 0.1,
nudge_x = -0.05,
nudge_y = 0.05,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.015, "npc"))
)+
ggtitle('')
ggsave(paste0('figures/orig_figures/Figure 14.png'), width = 15.3, height = 9, units = 'in')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(paletteer)
library(tidyverse)
library(ggrepel)
library(RColorBrewer)
library(ggnewscale)
library(latex2exp)
library(gridExtra)
library(ggrepel)
# decay parameter
mu <- 0.2
# P/G/S coordinates
pgs <- '0_0.789_-1.315'
# number of distance levels
num_dists <- 'num_dists_3'
# output file
d_real = read.csv(paste0('sheets/real_lexicons_fit_mu_',toString(mu),'_pgs_', pgs, num_dists, '.csv'))  %>%
mutate(Language = gsub('\\[(.*?)\\]', '', Language),
Language_family = str_extract(Language, "(?<=\\()(.*?)(?=,|\\))"),
LangCategory = 'real') %>% pivot_longer(2:10, names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distance_level', 'orientation'), sep = '_') %>% group_by(Language) %>%
mutate(word = as.character(word) %>% factor(levels = unique(.)) %>% as.numeric()) %>% ungroup() %>%
unite('mode', c('distance_level', 'orientation'), sep = '_') %>%
pivot_wider(names_from = mode, values_from = word)
d_sim = read.csv(paste0('sheets/sim_lexicons_fit_mu_',toString(mu),'_pgs_', pgs, num_dists, '.csv')) %>%
mutate(Language = gsub('\\[(.*?)\\]', '', Language),
Language_family = str_extract(Language, "(?<=\\()(.*?)(?=,|\\))"),
LangCategory = 'simulated')  %>% pivot_longer(2:10, names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distance_level', 'orientation'), sep = '_') %>% group_by(Language) %>%
mutate(word = as.character(word) %>% factor(levels = unique(.)) %>% as.numeric()) %>% ungroup() %>%
unite('mode', c('distance_level', 'orientation'), sep = '_') %>%
pivot_wider(names_from = mode, values_from = word)
d <- rbind(d_sim, d_real)
# non-deterministic optimal frontier
curve_non_deter = read.csv(paste0('sheets/ib_curve_non_deter_mu_',toString(mu),'_pgs_', pgs, num_dists, '.csv'))
# get columns indicating the (distance_level, orientation) combinations
co <- which(!is.na(str_extract(colnames(d), 'D\\d_')))
# calculate number of words
d[, "nwords"] <- apply(d[,co], 1, max)
# color patelle for plotting
colourCount = 9
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
set.seed(20230316)
real_paradigm_summary <- d %>% filter(LangCategory == 'real') %>%
group_by_at(vars(starts_with('D', ignore.case = FALSE))) %>%
slice_sample(n=1) %>%
left_join(d %>%
group_by_at(vars(starts_with('D', ignore.case = FALSE)))
%>% summarise(n = n())) %>%
ungroup() %>%
mutate(Language = gsub('^\\s+', '', Language))
most_informative_example <- tibble(orientation = c('goal', 'place', 'source', 'goal', 'place', 'source', 'goal', 'place', 'source',
'goal', 'place', 'source', 'goal', 'place', 'source', 'goal', 'place', 'source'),
distance_level = c('D1', 'D1', 'D1', 'D2', 'D2', 'D2', 'D3', 'D3', 'D3',
'D1', 'D1', 'D1', 'D2', 'D2', 'D2', 'D3', 'D3', 'D3'),
word = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 2,2,2,2,2,2,2,2,2),
cat = c(rep("Most informative", 9), rep("Most simple", 9)))
systematic_example <- tibble(orientation = c('goal', 'place', 'source', 'goal', 'place', 'source', 'goal', 'place', 'source',
'goal', 'place', 'source', 'goal', 'place', 'source', 'goal', 'place', 'source'),
distance_level = c('D1', 'D1', 'D1', 'D2', 'D2', 'D2', 'D3', 'D3', 'D3',
'D1', 'D1', 'D1', 'D2', 'D2', 'D2', 'D3', 'D3', 'D3'),
word = c(1,1,2,3,3,4,3,3,4,1,2,2,3,1,3,4,2,3),
cat = c(rep("systematic", 9), rep("non_systematic", 9)))
ggplot(most_informative_example, aes(x = orientation, y = distance_level, fill = as.factor(word))) +
geom_tile() +
facet_wrap(~cat) +
scale_fill_manual(values = getPalette(colourCount)) +
xlab('Orientation') +
ylab('Distance Level') +
theme_bw(25) +
theme(legend.position = 'none')
#ggsave(paste0('figures/mu_', toString(mu), 'tradeoff_illu_', num_dists, '.png'), width = 8, height = 4, unit = 'in')
ggsave(paste0('figures/orig_figures/Figure 1.png'), width = 8, height = 4, units = 'in')
consistent_viz <- ggplot(d %>% filter(Language == 'English (Indo-European, Germanic)') %>%
pivot_longer(all_of(co),names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distance_level', 'orientation'), sep = '_'),
aes(x = orientation, y = distance_level, fill = as.factor(word))) +
geom_tile() +
facet_wrap(~Language) +
scale_fill_manual(values = getPalette(colourCount)) +
xlab('Orientation') +
ylab('Distance Level') +
theme_bw(17) +
guides(fill = guide_legend(title = 'Word'))
inconsistent_viz <- ggplot(d %>% filter(X==6684) %>%
pivot_longer(all_of(co), names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distance_level', 'orientation'), sep = '_'),
aes(x = orientation, y = distance_level, fill = as.factor(word))) +
geom_tile() +
facet_wrap(~Language) +
scale_fill_manual(values = getPalette(colourCount)) +
xlab('Orientation') +
ylab('Distance Level') +
theme_bw(17) +
guides(fill = guide_legend(title = 'Word'))
w <- grid.arrange(consistent_viz, inconsistent_viz, ncol=2)
ggsave(plot =w, paste0('figures/orig_figures/Figure 3.png'), width = 12, height = 4, units = 'in')
pos <- position_jitter(height = 0.01, width = 0.01, seed = 2)
annotation_plot <- ggplot(d %>% filter(LangCategory == 'real') %>%
mutate(Area = str_to_title(Area))) +
geom_point(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), alpha = 0.1, size = 3, color = 'gray') +
geom_jitter(aes(x=`I.M.W.`, y=`I.U.W.`, color = Area), size = 3, position = pos) +
theme_bw() +
scale_color_brewer(palette = 'Set2') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title = element_blank(), legend.position = 'none') +
ggtitle('Finnish, Inuktitut, and 48 other languages') +
xlim(1.75, 1.765) +
ylim(0.60, 0.64)
annotation_plot_2 <- ggplot(d %>% filter(LangCategory == 'real') %>%
mutate(Area = str_to_title(Area))) +
geom_point(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), alpha = 0.1, size = 3, color = 'gray') +
geom_jitter(aes(x=`I.M.W.`, y=`I.U.W.`, color = Area), size = 3, position = pos) +
theme_bw() +
scale_color_brewer(palette = 'Set2') +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title = element_blank(), legend.position = 'none') +
ggtitle('English and 21 other languages') +
xlim(0.98, 1.005) +
ylim(0.4, 0.44)
ggplot(d %>% filter(LangCategory == 'real') %>%
mutate(Area = str_to_title(Area))) +
geom_point(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), alpha = 0.1, size = 3, color = 'gray') +
geom_jitter(aes(x=`I.M.W.`, y=`I.U.W.`, color = Area), size = 3, position = pos) +
geom_line(data = curve_non_deter, aes(x = complexity, y = informativity ), color = 'black', size = 1) +
geom_smooth(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), method = 'lm', color ='blue',
linetype='dashed') +
theme_bw(25) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
xlab('Complexity') +
ylab('Informativity') +
xlim(0,max(d$I.M.W.) + 0.35) +
ylim(0,max(d$I.U.W.) + 0.10) +
scale_color_brewer(palette = 'Set2') +
geom_text_repel(data = d %>% filter(Language %in% c('Abau (Sepik, Upper) ',
'  Doromu-Koki (Trans-New Guinea, Manubaran) ',
'Balese (Central Sudanic)',
'Abui (Timor-Alor-Pantar, Alor) ',
'  Orokaiva (Trans-New Guinea, Binanderean)'
)),
aes(x = I.M.W., y = I.U.W., label = Language),
point.padding = 0.1,
nudge_x = 0.05,
nudge_y = -0.15,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.01, "npc")),
#position = pos
)+
geom_text_repel(data = d %>% filter(Language %in% c('  Dyirbal (Pama-Nyungan)',
'  Maybrat (Maybrat-Karon) ',
'Hmong Njua (Hmong-Mien, Chuanqiandian)',
'English (Indo-European, Germanic)',
'Comanche (Uto-Aztecan, Numic) '
)),
aes(x = I.M.W., y = I.U.W., label = Language),
point.padding = 0.1,
nudge_x = -0.05,
nudge_y = 0.1,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.015, "npc"))
)+
geom_text_repel(data = d %>% filter(Language %in% c('  Inuktitut, Western Canadian (Eskimo-Aleut, Eskimo) ',
'Finnish (Uralic)'
)),
aes(x = I.M.W., y = I.U.W., label = Language),
#point.padding = 0.1,
nudge_x = 0.3,
nudge_y = 0.06,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.015, "npc"))
)+
ggtitle('') +
geom_rect(aes(xmin= 1.75, xmax=1.765, ymin=0.6, ymax=0.64), color='black', linetype='dashed', alpha=0) +
geom_rect(aes(xmin= 0.98, xmax=1.005, ymin=0.4, ymax=0.44), color='black', linetype='dashed', alpha=0) +
annotation_custom(ggplotGrob(annotation_plot), xmin=1.5, xmax=2, ymin=0, ymax=0.2) +
geom_rect(aes(xmin=1.5, xmax=2, ymin=0, ymax=0.2), color='black', linetype='dashed', alpha=0) +
geom_path(aes(x,y,group=grp),
data=data.frame(x = c(1.75,1.5,1.765,2), y=c(0.6,0.2,0.6,0.2),grp=c(1,1,2,2)),
linetype='dashed') +
annotation_custom(ggplotGrob(annotation_plot_2), xmin=0, xmax=0.5, ymin=0.5, ymax=0.7) +
geom_rect(aes(xmin=0, xmax=0.5, ymin=0.5, ymax=0.7), color='black', linetype='dashed', alpha=0) +
geom_path(aes(x,y,group=grp),
data=data.frame(x = c(0.98,0,0.98,0.5), y=c(0.4,0.5,0.44,0.5),grp=c(1,1,2,2)),
linetype='dashed')
ggsave(paste0('figures/orig_figures/Figure 5.png'), width = 15.3, height = 9, units = 'in')
set.seed(20230119)
colourCount = d$Language_family %>% unique() %>% length()
clrs <- paletteer_d("palettesForR::LaTeX", colourCount)
pos <- position_jitter(height = 0.01, width = 0.01, seed = 2)
ggplot(d %>% filter(LangCategory == 'real') %>% group_by(Language_family) %>% sample_n(size=1)) +
geom_point(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), alpha = 0.1, size = 3, color = 'gray') +
geom_jitter(aes(x=`I.M.W.`, y=`I.U.W.`, color = Language_family), size = 3, position = pos) +
geom_line(data = curve_non_deter, aes(x = complexity, y = informativity ), color = 'black', size = 1) +
geom_smooth(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), method = 'lm', color ='blue',
linetype='dashed') +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = 'bottom',
text = element_text(size=25)) +
xlab('Complexity') +
ylab('Informativity') +
xlim(0,max(d$I.M.W.) + 0.35) +
ylim(0,max(d$I.U.W.) + 0.10) +
scale_color_manual(values = clrs) +
geom_text_repel(data = d %>% filter(Language %in% c('Abau (Sepik, Upper) ',
'  Doromu-Koki (Trans-New Guinea, Manubaran) ',
'Balese (Central Sudanic)')),
aes(x = I.M.W., y = I.U.W., label = Language),
point.padding = 0.1,
nudge_x = -0.05,
nudge_y = -0.05,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.015, "npc")),
#position = pos
)+
geom_text_repel(data = d %>% filter(Language %in% c('  Dyirbal (Pama-Nyungan)',
'  Kodiak Alutiiq (Eskimo-Aleut, Aleut) ',
'Hmong Njua (Hmong-Mien, Chuanqiandian)',
'English (Indo-European, Germanic)'
)),
aes(x = I.M.W., y = I.U.W., label = Language),
point.padding = 0.1,
nudge_x = -0.05,
nudge_y = 0.05,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.015, "npc"))
)+
ggtitle('')
ggsave(paste0('figures/orig_figures/Figure 13.png'), width = 20, height = 15, units = 'in')
# color patelle for plotting
colourCount = 9
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
# filter out optimal real lexicons
real_lexicon_opts <- real_paradigm_summary %>% slice_min(order_by = gNID, n=5)
real_lexicon_opts_viz <- real_lexicon_opts %>% pivot_longer(co,names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distance_level', 'orientation'), sep = '_')
p1 <- ggplot(real_paradigm_summary %>% mutate(Language = gsub('\\((.*?)\\)', '', Language),
Label = paste0(str_sub(Language, 1, -2), "(", n, "), gNID = ",
sprintf('%.4f', as.numeric(gNID))))  %>% filter() %>%
slice_min(order_by = gNID, n =5) %>%
pivot_longer(co, names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distance_level', 'orientation'), sep = '_'),
aes(x = orientation, y = distance_level, fill = as.factor(word))) +
facet_wrap(~reorder(Label, nwords), nrow=2 ) +
geom_tile() +
scale_fill_manual(values = getPalette(colourCount)) +
xlab('Orientation') +
ylab('Distance Level') +
theme_bw(17) +
guides(fill = guide_legend(title = 'Word')) +
ggtitle('real paradigms')
#ggsave(paste0('figures/mu_', toString(mu), '_optimal_simulated_lexicon_', num_dists, '.png'), plot = p1, width = 12, height = 4, unit = 'in')
# filter out optimal simulated lexicons
sim_lexicon_opts <- d %>% filter(LangCategory == 'simulated') %>% slice_min(order_by = gNID, n=5)
sim_lexicon_opts_viz <- sim_lexicon_opts %>% pivot_longer(co,names_to = 'mode', values_to = 'word') %>%
separate(mode, into =c('distance_level', 'orientation'), sep = '_')
p2 <- ggplot(sim_lexicon_opts_viz %>% mutate(label = paste0(X, " (", 1, "), gNID = ", sprintf('%.4f', as.numeric(gNID)))),
aes(x = orientation, y = distance_level, fill = as.factor(word))) +
facet_wrap(~reorder(label, nwords), nrow = 2, ncol = 4) +
geom_tile() +
scale_fill_manual(values = getPalette(colourCount)) +
xlab('Orientation') +
ylab('Distance Level') +
theme_bw(17) +
guides(fill = guide_legend(title = 'Word')) +
ggtitle('simulated paradigms')
# ggsave(paste0('figures/mu_0.3_optimal_simulated_lexicon', num_dists, '.png'), plot = p2, height = 4, width = 12, unit = 'in')
p <- grid.arrange(p1,p2, nrow=2)
# ggsave(paste0('figures/mu_', toString(mu), '_optimal_lexicon_', num_dists, '.png'), plot = p, width = 15, height = 12, unit = 'in')
ggsave(plot = p, paste0('figures/orig_figures/Figure 8.png'), width = 15, height = 12, units = 'in')
ggplot(d %>% filter(LangCategory=='simulated'), aes(y=consistency_score, x=gNID)) +
facet_grid(rows=vars(nwords)) +
geom_jitter(alpha=0.2, color='gray50', size=1) +
geom_jitter(data=real_paradigm_summary, aes(x = gNID, y = consistency_score, size=n), color='blue') +
theme_bw(25) +
scale_y_continuous(breaks=c(2,6), labels=c("2" = "consistent", "6" = "not consistent")) +
scale_size_continuous(breaks=c(5, 10,20,30,40,50,60), range = c(1, 10)) +
guides(size=guide_legend(title='Number of languages')) +
ylab('Consistency') +
theme(panel.grid.minor = element_blank())
ggsave(paste0('figures/orig_figures/Figure 9.png'), width = 15, height = 12, units = 'in')
# pick the optimal lexicon for each tradeoff parameter
gammas <- 10^(seq(0.01, 1, 0.01))
etas <- 10^(seq(0, 1, 0.01))
opt_con <- d_sim[1,colnames(d_sim)]
opt_con$gammas = 0
opt_con$etas = 0
for (i in 1:length(gammas)){
for (j in 1:length(etas)){
J = d_sim$I.M.W. - gammas[i] * d_sim$I.U.W. + etas[j] * d_sim$consistency_score
ind = which.min(J)
opt_con <- rbind(opt_con, cbind(d_sim[ind,], gammas = gammas[i], etas = etas[j]))
}
}
opt_con = opt_con[2:nrow(opt_con),] %>% mutate(J = I.U.W. - gammas * I.M.W. + etas * consistency_score)
opt_con_summary <- opt_con %>% group_by_at(vars(starts_with('D', ignore.case = FALSE))) %>% summarise(consistency_score = mean(consistency_score),
gammas = min(gammas),
etas = min(etas))
ggplot(opt_con_summary %>%
pivot_longer(1:9, names_to = 'mode', values_to = 'word') %>%
separate(mode, into = c('distance_level', 'orientation'), sep = '_') %>%
mutate(label = paste0('beta = ', sprintf('%.3f', as.numeric(gammas)), '; gamma = ', sprintf('%.3f', as.numeric(etas)))),
aes(x = orientation, y = distance_level, fill = as.factor(word))) +
facet_wrap(~label) +
geom_tile() +
scale_fill_manual(values = getPalette(colourCount)) +
xlab('Orientation') +
ylab('Distance Level') +
theme_bw(17) +
guides(fill = guide_legend(title = 'Word'))
ggsave(paste0('figures/orig_figures/Figure 10.png'), width = 15, height = 12, units = 'in')
source("~/.active-rstudio-document", echo=TRUE)
ggplot(d %>% filter(LangCategory == 'real') %>%
mutate(Area = str_to_title(Area))) +
geom_point(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), alpha = 0.1, size = 3, color = 'gray') +
geom_jitter(aes(x=`I.M.W.`, y=`I.U.W.`, color = Area), size = 3, position = pos) +
geom_line(data = curve_non_deter, aes(x = complexity, y = informativity ), color = 'black', size = 1) +
geom_smooth(data = d %>% filter(LangCategory == 'simulated'), aes(x=`I.M.W.`, y=`I.U.W.`), method = 'lm', color ='blue',
linetype='dashed') +
theme_bw(25) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
xlab('Complexity') +
ylab('Informativity') +
xlim(0,max(d$I.M.W.) + 0.35) +
ylim(0,max(d$I.U.W.) + 0.10) +
scale_color_brewer(palette = 'Set2') +
geom_text_repel(data = d %>% filter(Language %in% c('Abau (Sepik, Upper) ',
'  Doromu-Koki (Trans-New Guinea, Manubaran) ',
'Balese (Central Sudanic)',
'Abui (Timor-Alor-Pantar, Alor) ',
'  Orokaiva (Trans-New Guinea, Binanderean)'
)),
aes(x = I.M.W., y = I.U.W., label = Language),
point.padding = 0.1,
nudge_x = 0.05,
nudge_y = -0.15,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.01, "npc")),
#position = pos
)+
geom_text_repel(data = d %>% filter(Language %in% c('  Dyirbal (Pama-Nyungan)',
'  Maybrat (Maybrat-Karon) ',
'Hmong Njua (Hmong-Mien, Chuanqiandian)',
'English (Indo-European, Germanic)',
'Comanche (Uto-Aztecan, Numic) '
)),
aes(x = I.M.W., y = I.U.W., label = Language),
point.padding = 0.1,
nudge_x = -0.05,
nudge_y = 0.1,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.015, "npc"))
)+
geom_text_repel(data = d %>% filter(Language %in% c('  Inuktitut, Western Canadian (Eskimo-Aleut, Eskimo) ',
'Finnish (Uralic)'
)),
aes(x = I.M.W., y = I.U.W., label = Language),
#point.padding = 0.1,
nudge_x = 0.3,
nudge_y = 0.06,
segment.curvature = -1e-20,
arrow = arrow(length = unit(0.015, "npc"))
)+
ggtitle('') +
geom_rect(aes(xmin= 1.75, xmax=1.765, ymin=0.6, ymax=0.64), color='black', linetype='dashed', alpha=0) +
geom_rect(aes(xmin= 0.98, xmax=1.005, ymin=0.4, ymax=0.44), color='black', linetype='dashed', alpha=0) +
annotation_custom(ggplotGrob(annotation_plot), xmin=1.5, xmax=2, ymin=0, ymax=0.2) +
geom_rect(aes(xmin=1.5, xmax=2, ymin=0, ymax=0.2), color='black', linetype='dashed', alpha=0) +
geom_path(aes(x,y,group=grp),
data=data.frame(x = c(1.75,1.5,1.765,2), y=c(0.6,0.2,0.6,0.2),grp=c(1,1,2,2)),
linetype='dashed') +
annotation_custom(ggplotGrob(annotation_plot_2), xmin=0, xmax=0.5, ymin=0.5, ymax=0.7) +
geom_rect(aes(xmin=0, xmax=0.5, ymin=0.5, ymax=0.7), color='black', linetype='dashed', alpha=0) +
geom_path(aes(x,y,group=grp),
data=data.frame(x = c(0.98,0,0.98,0.5), y=c(0.4,0.5,0.44,0.5),grp=c(1,1,2,2)),
linetype='dashed')
ggsave(paste0('figures/orig_figures/Figure 5.png'), width = 20, height = 9, units = 'in')
ggsave(paste0('figures/orig_figures/Figure 5.png'), width = 22, height = 9, units = 'in')
